=begin
#Winthrop Intelligence Internal API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module WinthropClient
  class ReportingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve some or all coach contract requests
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Object] :q Ransack query
    # @return [nil]
    def api_v1_reports_coach_contract_requests_get(opts = {})
      api_v1_reports_coach_contract_requests_get_with_http_info(opts)
      nil
    end

    # Retrieve some or all coach contract requests
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Object] :q Ransack query
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_v1_reports_coach_contract_requests_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportingApi.api_v1_reports_coach_contract_requests_get ...'
      end
      # resource path
      local_var_path = '/api/v1/reports/coach_contract_requests'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"ReportingApi.api_v1_reports_coach_contract_requests_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportingApi#api_v1_reports_coach_contract_requests_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve some or all coach history
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Object] :q Ransack query
    # @return [nil]
    def api_v1_reports_coach_history_get(opts = {})
      api_v1_reports_coach_history_get_with_http_info(opts)
      nil
    end

    # Retrieve some or all coach history
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Object] :q Ransack query
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_v1_reports_coach_history_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportingApi.api_v1_reports_coach_history_get ...'
      end
      # resource path
      local_var_path = '/api/v1/reports/coach_history'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"ReportingApi.api_v1_reports_coach_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportingApi#api_v1_reports_coach_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve some or all conferenceships
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Object] :q Ransack query
    # @return [nil]
    def api_v1_reports_conferenceships_get(opts = {})
      api_v1_reports_conferenceships_get_with_http_info(opts)
      nil
    end

    # Retrieve some or all conferenceships
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Object] :q Ransack query
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_v1_reports_conferenceships_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportingApi.api_v1_reports_conferenceships_get ...'
      end
      # resource path
      local_var_path = '/api/v1/reports/conferenceships'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"ReportingApi.api_v1_reports_conferenceships_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportingApi#api_v1_reports_conferenceships_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve some or all foia details
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Object] :q Ransack query
    # @return [nil]
    def api_v1_reports_foia_details_get(opts = {})
      api_v1_reports_foia_details_get_with_http_info(opts)
      nil
    end

    # Retrieve some or all foia details
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Object] :q Ransack query
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_v1_reports_foia_details_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportingApi.api_v1_reports_foia_details_get ...'
      end
      # resource path
      local_var_path = '/api/v1/reports/foia_details'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"ReportingApi.api_v1_reports_foia_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportingApi#api_v1_reports_foia_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve some or all games
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Object] :q Ransack query
    # @return [nil]
    def api_v1_reports_games_get(opts = {})
      api_v1_reports_games_get_with_http_info(opts)
      nil
    end

    # Retrieve some or all games
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Object] :q Ransack query
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_v1_reports_games_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportingApi.api_v1_reports_games_get ...'
      end
      # resource path
      local_var_path = '/api/v1/reports/games'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"ReportingApi.api_v1_reports_games_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportingApi#api_v1_reports_games_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve some or all client invoices
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Object] :q Ransack query
    # @return [nil]
    def api_v1_reports_invoices_get(opts = {})
      api_v1_reports_invoices_get_with_http_info(opts)
      nil
    end

    # Retrieve some or all client invoices
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Object] :q Ransack query
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_v1_reports_invoices_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportingApi.api_v1_reports_invoices_get ...'
      end
      # resource path
      local_var_path = '/api/v1/reports/invoices'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"ReportingApi.api_v1_reports_invoices_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportingApi#api_v1_reports_invoices_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve some or all school contract requests
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Object] :q Ransack query
    # @return [nil]
    def api_v1_reports_school_contract_requests_get(opts = {})
      api_v1_reports_school_contract_requests_get_with_http_info(opts)
      nil
    end

    # Retrieve some or all school contract requests
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Object] :q Ransack query
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_v1_reports_school_contract_requests_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportingApi.api_v1_reports_school_contract_requests_get ...'
      end
      # resource path
      local_var_path = '/api/v1/reports/school_contract_requests'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"ReportingApi.api_v1_reports_school_contract_requests_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportingApi#api_v1_reports_school_contract_requests_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve subscriptions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Object] :q Ransack query
    # @return [nil]
    def api_v1_reports_subscriptions_get(opts = {})
      api_v1_reports_subscriptions_get_with_http_info(opts)
      nil
    end

    # Retrieve subscriptions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Object] :q Ransack query
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_v1_reports_subscriptions_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportingApi.api_v1_reports_subscriptions_get ...'
      end
      # resource path
      local_var_path = '/api/v1/reports/subscriptions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"ReportingApi.api_v1_reports_subscriptions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportingApi#api_v1_reports_subscriptions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
