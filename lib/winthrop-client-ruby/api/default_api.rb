=begin
#Winthrop Intelligence Internal API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.21.5

Generated by: https://openapi-generator.tech
Generator version: 7.4.0

=end

require 'cgi'

module WinthropClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve average compensation for a conference
    # @param conference_id [Integer] ID of the conference
    # @param season_years [Array<Integer>] Season years
    # @param sport_ids [Array<Integer>] IDs of the sports
    # @param position_type_ids [Array<Integer>] IDs of the position types
    # @param [Hash] opts the optional parameters
    # @return [AverageCompensation]
    def average_conference_comp(conference_id, season_years, sport_ids, position_type_ids, opts = {})
      data, _status_code, _headers = average_conference_comp_with_http_info(conference_id, season_years, sport_ids, position_type_ids, opts)
      data
    end

    # Retrieve average compensation for a conference
    # @param conference_id [Integer] ID of the conference
    # @param season_years [Array<Integer>] Season years
    # @param sport_ids [Array<Integer>] IDs of the sports
    # @param position_type_ids [Array<Integer>] IDs of the position types
    # @param [Hash] opts the optional parameters
    # @return [Array<(AverageCompensation, Integer, Hash)>] AverageCompensation data, response status code and response headers
    def average_conference_comp_with_http_info(conference_id, season_years, sport_ids, position_type_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.average_conference_comp ...'
      end
      # verify the required parameter 'conference_id' is set
      if @api_client.config.client_side_validation && conference_id.nil?
        fail ArgumentError, "Missing the required parameter 'conference_id' when calling DefaultApi.average_conference_comp"
      end
      # verify the required parameter 'season_years' is set
      if @api_client.config.client_side_validation && season_years.nil?
        fail ArgumentError, "Missing the required parameter 'season_years' when calling DefaultApi.average_conference_comp"
      end
      # verify the required parameter 'sport_ids' is set
      if @api_client.config.client_side_validation && sport_ids.nil?
        fail ArgumentError, "Missing the required parameter 'sport_ids' when calling DefaultApi.average_conference_comp"
      end
      # verify the required parameter 'position_type_ids' is set
      if @api_client.config.client_side_validation && position_type_ids.nil?
        fail ArgumentError, "Missing the required parameter 'position_type_ids' when calling DefaultApi.average_conference_comp"
      end
      # resource path
      local_var_path = '/api/v1/compensations/average_conference_comp'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'conference_id'] = conference_id
      query_params[:'season_years'] = @api_client.build_collection_param(season_years, :csv)
      query_params[:'sport_ids'] = @api_client.build_collection_param(sport_ids, :csv)
      query_params[:'position_type_ids'] = @api_client.build_collection_param(position_type_ids, :csv)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AverageCompensation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.average_conference_comp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#average_conference_comp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve average compensation for a division
    # @param division_id [Integer] ID of the division
    # @param season_years [Array<Integer>] Season years
    # @param sport_ids [Array<Integer>] IDs of the sports
    # @param position_type_ids [Array<Integer>] IDs of the position types
    # @param [Hash] opts the optional parameters
    # @return [AverageCompensation]
    def average_division_comp(division_id, season_years, sport_ids, position_type_ids, opts = {})
      data, _status_code, _headers = average_division_comp_with_http_info(division_id, season_years, sport_ids, position_type_ids, opts)
      data
    end

    # Retrieve average compensation for a division
    # @param division_id [Integer] ID of the division
    # @param season_years [Array<Integer>] Season years
    # @param sport_ids [Array<Integer>] IDs of the sports
    # @param position_type_ids [Array<Integer>] IDs of the position types
    # @param [Hash] opts the optional parameters
    # @return [Array<(AverageCompensation, Integer, Hash)>] AverageCompensation data, response status code and response headers
    def average_division_comp_with_http_info(division_id, season_years, sport_ids, position_type_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.average_division_comp ...'
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling DefaultApi.average_division_comp"
      end
      # verify the required parameter 'season_years' is set
      if @api_client.config.client_side_validation && season_years.nil?
        fail ArgumentError, "Missing the required parameter 'season_years' when calling DefaultApi.average_division_comp"
      end
      # verify the required parameter 'sport_ids' is set
      if @api_client.config.client_side_validation && sport_ids.nil?
        fail ArgumentError, "Missing the required parameter 'sport_ids' when calling DefaultApi.average_division_comp"
      end
      # verify the required parameter 'position_type_ids' is set
      if @api_client.config.client_side_validation && position_type_ids.nil?
        fail ArgumentError, "Missing the required parameter 'position_type_ids' when calling DefaultApi.average_division_comp"
      end
      # resource path
      local_var_path = '/api/v1/compensations/average_division_comp'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'division_id'] = division_id
      query_params[:'season_years'] = @api_client.build_collection_param(season_years, :csv)
      query_params[:'sport_ids'] = @api_client.build_collection_param(sport_ids, :csv)
      query_params[:'position_type_ids'] = @api_client.build_collection_param(position_type_ids, :csv)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AverageCompensation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.average_division_comp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#average_division_comp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve average compensation for a school
    # @param school_id [Integer] ID of the school
    # @param season_years [Array<Integer>] Season years
    # @param sport_ids [Array<Integer>] IDs of the sports
    # @param position_type_ids [Array<Integer>] IDs of the position types
    # @param [Hash] opts the optional parameters
    # @return [AverageCompensation]
    def average_school_comp(school_id, season_years, sport_ids, position_type_ids, opts = {})
      data, _status_code, _headers = average_school_comp_with_http_info(school_id, season_years, sport_ids, position_type_ids, opts)
      data
    end

    # Retrieve average compensation for a school
    # @param school_id [Integer] ID of the school
    # @param season_years [Array<Integer>] Season years
    # @param sport_ids [Array<Integer>] IDs of the sports
    # @param position_type_ids [Array<Integer>] IDs of the position types
    # @param [Hash] opts the optional parameters
    # @return [Array<(AverageCompensation, Integer, Hash)>] AverageCompensation data, response status code and response headers
    def average_school_comp_with_http_info(school_id, season_years, sport_ids, position_type_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.average_school_comp ...'
      end
      # verify the required parameter 'school_id' is set
      if @api_client.config.client_side_validation && school_id.nil?
        fail ArgumentError, "Missing the required parameter 'school_id' when calling DefaultApi.average_school_comp"
      end
      # verify the required parameter 'season_years' is set
      if @api_client.config.client_side_validation && season_years.nil?
        fail ArgumentError, "Missing the required parameter 'season_years' when calling DefaultApi.average_school_comp"
      end
      # verify the required parameter 'sport_ids' is set
      if @api_client.config.client_side_validation && sport_ids.nil?
        fail ArgumentError, "Missing the required parameter 'sport_ids' when calling DefaultApi.average_school_comp"
      end
      # verify the required parameter 'position_type_ids' is set
      if @api_client.config.client_side_validation && position_type_ids.nil?
        fail ArgumentError, "Missing the required parameter 'position_type_ids' when calling DefaultApi.average_school_comp"
      end
      # resource path
      local_var_path = '/api/v1/compensations/average_school_comp'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'school_id'] = school_id
      query_params[:'season_years'] = @api_client.build_collection_param(season_years, :csv)
      query_params[:'sport_ids'] = @api_client.build_collection_param(sport_ids, :csv)
      query_params[:'position_type_ids'] = @api_client.build_collection_param(position_type_ids, :csv)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AverageCompensation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.average_school_comp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#average_school_comp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve average compensation for a subdivision
    # @param subdivision_id [Integer] ID of the subdivision
    # @param season_years [Array<Integer>] Season years
    # @param sport_ids [Array<Integer>] IDs of the sports
    # @param position_type_ids [Array<Integer>] IDs of the position types
    # @param [Hash] opts the optional parameters
    # @return [AverageCompensation]
    def average_subdivision_comp(subdivision_id, season_years, sport_ids, position_type_ids, opts = {})
      data, _status_code, _headers = average_subdivision_comp_with_http_info(subdivision_id, season_years, sport_ids, position_type_ids, opts)
      data
    end

    # Retrieve average compensation for a subdivision
    # @param subdivision_id [Integer] ID of the subdivision
    # @param season_years [Array<Integer>] Season years
    # @param sport_ids [Array<Integer>] IDs of the sports
    # @param position_type_ids [Array<Integer>] IDs of the position types
    # @param [Hash] opts the optional parameters
    # @return [Array<(AverageCompensation, Integer, Hash)>] AverageCompensation data, response status code and response headers
    def average_subdivision_comp_with_http_info(subdivision_id, season_years, sport_ids, position_type_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.average_subdivision_comp ...'
      end
      # verify the required parameter 'subdivision_id' is set
      if @api_client.config.client_side_validation && subdivision_id.nil?
        fail ArgumentError, "Missing the required parameter 'subdivision_id' when calling DefaultApi.average_subdivision_comp"
      end
      # verify the required parameter 'season_years' is set
      if @api_client.config.client_side_validation && season_years.nil?
        fail ArgumentError, "Missing the required parameter 'season_years' when calling DefaultApi.average_subdivision_comp"
      end
      # verify the required parameter 'sport_ids' is set
      if @api_client.config.client_side_validation && sport_ids.nil?
        fail ArgumentError, "Missing the required parameter 'sport_ids' when calling DefaultApi.average_subdivision_comp"
      end
      # verify the required parameter 'position_type_ids' is set
      if @api_client.config.client_side_validation && position_type_ids.nil?
        fail ArgumentError, "Missing the required parameter 'position_type_ids' when calling DefaultApi.average_subdivision_comp"
      end
      # resource path
      local_var_path = '/api/v1/compensations/average_subdivision_comp'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'subdivision_id'] = subdivision_id
      query_params[:'season_years'] = @api_client.build_collection_param(season_years, :csv)
      query_params[:'sport_ids'] = @api_client.build_collection_param(sport_ids, :csv)
      query_params[:'position_type_ids'] = @api_client.build_collection_param(position_type_ids, :csv)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AverageCompensation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.average_subdivision_comp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#average_subdivision_comp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the COLI-adjusted compensation
    # @param school_id [Integer] ID of the School
    # @param other_person_school_id [Integer] ID of the other person School
    # @param other_person_total_compensation [Integer] Other person total compensation amount
    # @param [Hash] opts the optional parameters
    # @return [COLIAdjusted]
    def compare_coli(school_id, other_person_school_id, other_person_total_compensation, opts = {})
      data, _status_code, _headers = compare_coli_with_http_info(school_id, other_person_school_id, other_person_total_compensation, opts)
      data
    end

    # Retrieve the COLI-adjusted compensation
    # @param school_id [Integer] ID of the School
    # @param other_person_school_id [Integer] ID of the other person School
    # @param other_person_total_compensation [Integer] Other person total compensation amount
    # @param [Hash] opts the optional parameters
    # @return [Array<(COLIAdjusted, Integer, Hash)>] COLIAdjusted data, response status code and response headers
    def compare_coli_with_http_info(school_id, other_person_school_id, other_person_total_compensation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.compare_coli ...'
      end
      # verify the required parameter 'school_id' is set
      if @api_client.config.client_side_validation && school_id.nil?
        fail ArgumentError, "Missing the required parameter 'school_id' when calling DefaultApi.compare_coli"
      end
      # verify the required parameter 'other_person_school_id' is set
      if @api_client.config.client_side_validation && other_person_school_id.nil?
        fail ArgumentError, "Missing the required parameter 'other_person_school_id' when calling DefaultApi.compare_coli"
      end
      # verify the required parameter 'other_person_total_compensation' is set
      if @api_client.config.client_side_validation && other_person_total_compensation.nil?
        fail ArgumentError, "Missing the required parameter 'other_person_total_compensation' when calling DefaultApi.compare_coli"
      end
      # resource path
      local_var_path = '/api/v1/schools/compare_coli'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'school_id'] = school_id
      query_params[:'other_person_school_id'] = other_person_school_id
      query_params[:'other_person_total_compensation'] = other_person_total_compensation

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'COLIAdjusted'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.compare_coli",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#compare_coli\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Conference
    # @param [Hash] opts the optional parameters
    # @option opts [Conference] :conference 
    # @return [Conference]
    def create_conference(opts = {})
      data, _status_code, _headers = create_conference_with_http_info(opts)
      data
    end

    # Create a new Conference
    # @param [Hash] opts the optional parameters
    # @option opts [Conference] :conference 
    # @return [Array<(Conference, Integer, Hash)>] Conference data, response status code and response headers
    def create_conference_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_conference ...'
      end
      # resource path
      local_var_path = '/api/v1/conferences'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'conference'])

      # return_type
      return_type = opts[:debug_return_type] || 'Conference'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_conference",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_conference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Conferenceship
    # @param [Hash] opts the optional parameters
    # @option opts [Conferenceship] :conferenceship 
    # @return [Conferenceship]
    def create_conferenceship(opts = {})
      data, _status_code, _headers = create_conferenceship_with_http_info(opts)
      data
    end

    # Create a new Conferenceship
    # @param [Hash] opts the optional parameters
    # @option opts [Conferenceship] :conferenceship 
    # @return [Array<(Conferenceship, Integer, Hash)>] Conferenceship data, response status code and response headers
    def create_conferenceship_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_conferenceship ...'
      end
      # resource path
      local_var_path = '/api/v1/conferenceships'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'conferenceship'])

      # return_type
      return_type = opts[:debug_return_type] || 'Conferenceship'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_conferenceship",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_conferenceship\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new foia label
    # @param foia_label [FoiaLabel] Foia label to create
    # @param [Hash] opts the optional parameters
    # @return [FoiaLabel]
    def create_foia_label(foia_label, opts = {})
      data, _status_code, _headers = create_foia_label_with_http_info(foia_label, opts)
      data
    end

    # Create a new foia label
    # @param foia_label [FoiaLabel] Foia label to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(FoiaLabel, Integer, Hash)>] FoiaLabel data, response status code and response headers
    def create_foia_label_with_http_info(foia_label, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_foia_label ...'
      end
      # verify the required parameter 'foia_label' is set
      if @api_client.config.client_side_validation && foia_label.nil?
        fail ArgumentError, "Missing the required parameter 'foia_label' when calling DefaultApi.create_foia_label"
      end
      # resource path
      local_var_path = '/api/v1/foia_labels'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(foia_label)

      # return_type
      return_type = opts[:debug_return_type] || 'FoiaLabel'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_foia_label",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_foia_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new foia request
    # @param foia_request [FoiaRequest] Foia request to create
    # @param [Hash] opts the optional parameters
    # @return [FoiaRequest]
    def create_foia_request(foia_request, opts = {})
      data, _status_code, _headers = create_foia_request_with_http_info(foia_request, opts)
      data
    end

    # Create a new foia request
    # @param foia_request [FoiaRequest] Foia request to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(FoiaRequest, Integer, Hash)>] FoiaRequest data, response status code and response headers
    def create_foia_request_with_http_info(foia_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_foia_request ...'
      end
      # verify the required parameter 'foia_request' is set
      if @api_client.config.client_side_validation && foia_request.nil?
        fail ArgumentError, "Missing the required parameter 'foia_request' when calling DefaultApi.create_foia_request"
      end
      # resource path
      local_var_path = '/api/v1/foia_requests'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(foia_request)

      # return_type
      return_type = opts[:debug_return_type] || 'FoiaRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_foia_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_foia_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a job post
    # Create a job post
    # @param [Hash] opts the optional parameters
    # @option opts [JobPost] :job_post 
    # @return [JobPost]
    def create_job_post(opts = {})
      data, _status_code, _headers = create_job_post_with_http_info(opts)
      data
    end

    # Create a job post
    # Create a job post
    # @param [Hash] opts the optional parameters
    # @option opts [JobPost] :job_post 
    # @return [Array<(JobPost, Integer, Hash)>] JobPost data, response status code and response headers
    def create_job_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_job_post ...'
      end
      # resource path
      local_var_path = '/central_jobs/job_posts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'job_post'])

      # return_type
      return_type = opts[:debug_return_type] || 'JobPost'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_job_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_job_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new requested item
    # @param requested_item [RequestedItem] Requested item to create
    # @param [Hash] opts the optional parameters
    # @return [RequestedItem]
    def create_requested_item(requested_item, opts = {})
      data, _status_code, _headers = create_requested_item_with_http_info(requested_item, opts)
      data
    end

    # Create a new requested item
    # @param requested_item [RequestedItem] Requested item to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(RequestedItem, Integer, Hash)>] RequestedItem data, response status code and response headers
    def create_requested_item_with_http_info(requested_item, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_requested_item ...'
      end
      # verify the required parameter 'requested_item' is set
      if @api_client.config.client_side_validation && requested_item.nil?
        fail ArgumentError, "Missing the required parameter 'requested_item' when calling DefaultApi.create_requested_item"
      end
      # resource path
      local_var_path = '/api/v1/requested_items'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(requested_item)

      # return_type
      return_type = opts[:debug_return_type] || 'RequestedItem'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_requested_item",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_requested_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a single Conference
    # @param conference_id [Integer] ID of the Conference
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_conference(conference_id, opts = {})
      delete_conference_with_http_info(conference_id, opts)
      nil
    end

    # Delete a single Conference
    # @param conference_id [Integer] ID of the Conference
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_conference_with_http_info(conference_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_conference ...'
      end
      # verify the required parameter 'conference_id' is set
      if @api_client.config.client_side_validation && conference_id.nil?
        fail ArgumentError, "Missing the required parameter 'conference_id' when calling DefaultApi.delete_conference"
      end
      # resource path
      local_var_path = '/api/v1/conferences/{conferenceId}'.sub('{' + 'conferenceId' + '}', CGI.escape(conference_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_conference",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_conference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a single Conferenceship
    # @param conferenceship_id [Integer] ID of the Conferenceship
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_conferenceship(conferenceship_id, opts = {})
      delete_conferenceship_with_http_info(conferenceship_id, opts)
      nil
    end

    # Delete a single Conferenceship
    # @param conferenceship_id [Integer] ID of the Conferenceship
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_conferenceship_with_http_info(conferenceship_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_conferenceship ...'
      end
      # verify the required parameter 'conferenceship_id' is set
      if @api_client.config.client_side_validation && conferenceship_id.nil?
        fail ArgumentError, "Missing the required parameter 'conferenceship_id' when calling DefaultApi.delete_conferenceship"
      end
      # resource path
      local_var_path = '/api/v1/conferenceships/{conferenceshipId}'.sub('{' + 'conferenceshipId' + '}', CGI.escape(conferenceship_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_conferenceship",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_conferenceship\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a single foia label
    # @param foia_label_id [Integer] ID of foia label to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_foia_label(foia_label_id, opts = {})
      delete_foia_label_with_http_info(foia_label_id, opts)
      nil
    end

    # Delete a single foia label
    # @param foia_label_id [Integer] ID of foia label to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_foia_label_with_http_info(foia_label_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_foia_label ...'
      end
      # verify the required parameter 'foia_label_id' is set
      if @api_client.config.client_side_validation && foia_label_id.nil?
        fail ArgumentError, "Missing the required parameter 'foia_label_id' when calling DefaultApi.delete_foia_label"
      end
      # resource path
      local_var_path = '/api/v1/foia_labels/{foiaLabelId}'.sub('{' + 'foiaLabelId' + '}', CGI.escape(foia_label_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_foia_label",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_foia_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a single foia request
    # @param foia_request_id [Integer] ID of foia request to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_foia_request(foia_request_id, opts = {})
      delete_foia_request_with_http_info(foia_request_id, opts)
      nil
    end

    # Delete a single foia request
    # @param foia_request_id [Integer] ID of foia request to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_foia_request_with_http_info(foia_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_foia_request ...'
      end
      # verify the required parameter 'foia_request_id' is set
      if @api_client.config.client_side_validation && foia_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'foia_request_id' when calling DefaultApi.delete_foia_request"
      end
      # resource path
      local_var_path = '/api/v1/foia_requests/{foiaRequestId}'.sub('{' + 'foiaRequestId' + '}', CGI.escape(foia_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_foia_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_foia_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a job post
    # Delete a job post
    # @param job_post_id [Integer] ID of job post to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_job_post(job_post_id, opts = {})
      delete_job_post_with_http_info(job_post_id, opts)
      nil
    end

    # Delete a job post
    # Delete a job post
    # @param job_post_id [Integer] ID of job post to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_job_post_with_http_info(job_post_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_job_post ...'
      end
      # verify the required parameter 'job_post_id' is set
      if @api_client.config.client_side_validation && job_post_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_post_id' when calling DefaultApi.delete_job_post"
      end
      # resource path
      local_var_path = '/central_jobs/job_posts/{jobPostId}'.sub('{' + 'jobPostId' + '}', CGI.escape(job_post_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_job_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_job_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a single requested item
    # @param requested_item_id [Integer] ID of requested item to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_requested_item(requested_item_id, opts = {})
      delete_requested_item_with_http_info(requested_item_id, opts)
      nil
    end

    # Delete a single requested item
    # @param requested_item_id [Integer] ID of requested item to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_requested_item_with_http_info(requested_item_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_requested_item ...'
      end
      # verify the required parameter 'requested_item_id' is set
      if @api_client.config.client_side_validation && requested_item_id.nil?
        fail ArgumentError, "Missing the required parameter 'requested_item_id' when calling DefaultApi.delete_requested_item"
      end
      # resource path
      local_var_path = '/api/v1/requested_items/{requestedItemId}'.sub('{' + 'requestedItemId' + '}', CGI.escape(requested_item_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_requested_item",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_requested_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a single administrator
    # @param administrator_id [Integer] ID of administrator to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Administrator]
    def get_administrator(administrator_id, opts = {})
      data, _status_code, _headers = get_administrator_with_http_info(administrator_id, opts)
      data
    end

    # Retrieve a single administrator
    # @param administrator_id [Integer] ID of administrator to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(Administrator, Integer, Hash)>] Administrator data, response status code and response headers
    def get_administrator_with_http_info(administrator_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_administrator ...'
      end
      # verify the required parameter 'administrator_id' is set
      if @api_client.config.client_side_validation && administrator_id.nil?
        fail ArgumentError, "Missing the required parameter 'administrator_id' when calling DefaultApi.get_administrator"
      end
      # resource path
      local_var_path = '/api/v1/administrators/{administratorId}'.sub('{' + 'administratorId' + '}', CGI.escape(administrator_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Administrator'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_administrator",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_administrator\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve some or all administrators
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [AdministratorCollection]
    def get_administrators(opts = {})
      data, _status_code, _headers = get_administrators_with_http_info(opts)
      data
    end

    # Retrieve some or all administrators
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [Array<(AdministratorCollection, Integer, Hash)>] AdministratorCollection data, response status code and response headers
    def get_administrators_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_administrators ...'
      end
      # resource path
      local_var_path = '/api/v1/administrators'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdministratorCollection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_administrators",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_administrators\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a single audited financial report status
    # @param audited_financial_report_status_id [Integer] ID of audited financial report status to retrieve
    # @param [Hash] opts the optional parameters
    # @return [AuditedFinancialReportStatus]
    def get_audited_financial_report_status(audited_financial_report_status_id, opts = {})
      data, _status_code, _headers = get_audited_financial_report_status_with_http_info(audited_financial_report_status_id, opts)
      data
    end

    # Retrieve a single audited financial report status
    # @param audited_financial_report_status_id [Integer] ID of audited financial report status to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuditedFinancialReportStatus, Integer, Hash)>] AuditedFinancialReportStatus data, response status code and response headers
    def get_audited_financial_report_status_with_http_info(audited_financial_report_status_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_audited_financial_report_status ...'
      end
      # verify the required parameter 'audited_financial_report_status_id' is set
      if @api_client.config.client_side_validation && audited_financial_report_status_id.nil?
        fail ArgumentError, "Missing the required parameter 'audited_financial_report_status_id' when calling DefaultApi.get_audited_financial_report_status"
      end
      # resource path
      local_var_path = '/api/v1/audited_financial_report_statuses/{auditedFinancialReportStatusId}'.sub('{' + 'auditedFinancialReportStatusId' + '}', CGI.escape(audited_financial_report_status_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuditedFinancialReportStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_audited_financial_report_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_audited_financial_report_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve some or all audited financial report statuses
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [AuditedFinancialReportStatusCollection]
    def get_audited_financial_report_statuses(opts = {})
      data, _status_code, _headers = get_audited_financial_report_statuses_with_http_info(opts)
      data
    end

    # Retrieve some or all audited financial report statuses
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [Array<(AuditedFinancialReportStatusCollection, Integer, Hash)>] AuditedFinancialReportStatusCollection data, response status code and response headers
    def get_audited_financial_report_statuses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_audited_financial_report_statuses ...'
      end
      # resource path
      local_var_path = '/api/v1/audited_financial_report_statuses'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuditedFinancialReportStatusCollection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_audited_financial_report_statuses",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_audited_financial_report_statuses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all categories
    # List all categories
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [CategoryCollection]
    def get_categories(opts = {})
      data, _status_code, _headers = get_categories_with_http_info(opts)
      data
    end

    # List all categories
    # List all categories
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [Array<(CategoryCollection, Integer, Hash)>] CategoryCollection data, response status code and response headers
    def get_categories_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_categories ...'
      end
      # resource path
      local_var_path = '/central_jobs/categories'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CategoryCollection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_categories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a single coach
    # @param coach_id [Integer] ID of coach to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Coach]
    def get_coach(coach_id, opts = {})
      data, _status_code, _headers = get_coach_with_http_info(coach_id, opts)
      data
    end

    # Retrieve a single coach
    # @param coach_id [Integer] ID of coach to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(Coach, Integer, Hash)>] Coach data, response status code and response headers
    def get_coach_with_http_info(coach_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_coach ...'
      end
      # verify the required parameter 'coach_id' is set
      if @api_client.config.client_side_validation && coach_id.nil?
        fail ArgumentError, "Missing the required parameter 'coach_id' when calling DefaultApi.get_coach"
      end
      # resource path
      local_var_path = '/api/v1/coaches/{coachId}'.sub('{' + 'coachId' + '}', CGI.escape(coach_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Coach'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_coach",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_coach\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve some or all coaches
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [CoachCollection]
    def get_coaches(opts = {})
      data, _status_code, _headers = get_coaches_with_http_info(opts)
      data
    end

    # Retrieve some or all coaches
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [Array<(CoachCollection, Integer, Hash)>] CoachCollection data, response status code and response headers
    def get_coaches_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_coaches ...'
      end
      # resource path
      local_var_path = '/api/v1/coaches'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CoachCollection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_coaches",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_coaches\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a single compensation
    # @param compensation_id [Integer] ID of compensation to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Compensation]
    def get_compensation(compensation_id, opts = {})
      data, _status_code, _headers = get_compensation_with_http_info(compensation_id, opts)
      data
    end

    # Retrieve a single compensation
    # @param compensation_id [Integer] ID of compensation to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(Compensation, Integer, Hash)>] Compensation data, response status code and response headers
    def get_compensation_with_http_info(compensation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_compensation ...'
      end
      # verify the required parameter 'compensation_id' is set
      if @api_client.config.client_side_validation && compensation_id.nil?
        fail ArgumentError, "Missing the required parameter 'compensation_id' when calling DefaultApi.get_compensation"
      end
      # resource path
      local_var_path = '/api/v1/compensations/{compensationId}'.sub('{' + 'compensationId' + '}', CGI.escape(compensation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Compensation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_compensation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_compensation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve some or all compensations
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [CompensationCollection]
    def get_compensations(opts = {})
      data, _status_code, _headers = get_compensations_with_http_info(opts)
      data
    end

    # Retrieve some or all compensations
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [Array<(CompensationCollection, Integer, Hash)>] CompensationCollection data, response status code and response headers
    def get_compensations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_compensations ...'
      end
      # resource path
      local_var_path = '/api/v1/compensations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CompensationCollection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_compensations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_compensations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a single Conference
    # @param conference_id [Integer] ID of the Conference
    # @param [Hash] opts the optional parameters
    # @return [Conference]
    def get_conference(conference_id, opts = {})
      data, _status_code, _headers = get_conference_with_http_info(conference_id, opts)
      data
    end

    # Retrieve a single Conference
    # @param conference_id [Integer] ID of the Conference
    # @param [Hash] opts the optional parameters
    # @return [Array<(Conference, Integer, Hash)>] Conference data, response status code and response headers
    def get_conference_with_http_info(conference_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_conference ...'
      end
      # verify the required parameter 'conference_id' is set
      if @api_client.config.client_side_validation && conference_id.nil?
        fail ArgumentError, "Missing the required parameter 'conference_id' when calling DefaultApi.get_conference"
      end
      # resource path
      local_var_path = '/api/v1/conferences/{conferenceId}'.sub('{' + 'conferenceId' + '}', CGI.escape(conference_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Conference'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_conference",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_conference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve some or all conferences
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [ConferenceCollection]
    def get_conferences(opts = {})
      data, _status_code, _headers = get_conferences_with_http_info(opts)
      data
    end

    # Retrieve some or all conferences
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [Array<(ConferenceCollection, Integer, Hash)>] ConferenceCollection data, response status code and response headers
    def get_conferences_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_conferences ...'
      end
      # resource path
      local_var_path = '/api/v1/conferences'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConferenceCollection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_conferences",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_conferences\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a single Conferenceship
    # @param conferenceship_id [Integer] ID of the Conferenceship
    # @param [Hash] opts the optional parameters
    # @return [Conferenceship]
    def get_conferenceship(conferenceship_id, opts = {})
      data, _status_code, _headers = get_conferenceship_with_http_info(conferenceship_id, opts)
      data
    end

    # Retrieve a single Conferenceship
    # @param conferenceship_id [Integer] ID of the Conferenceship
    # @param [Hash] opts the optional parameters
    # @return [Array<(Conferenceship, Integer, Hash)>] Conferenceship data, response status code and response headers
    def get_conferenceship_with_http_info(conferenceship_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_conferenceship ...'
      end
      # verify the required parameter 'conferenceship_id' is set
      if @api_client.config.client_side_validation && conferenceship_id.nil?
        fail ArgumentError, "Missing the required parameter 'conferenceship_id' when calling DefaultApi.get_conferenceship"
      end
      # resource path
      local_var_path = '/api/v1/conferenceships/{conferenceshipId}'.sub('{' + 'conferenceshipId' + '}', CGI.escape(conferenceship_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Conferenceship'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_conferenceship",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_conferenceship\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve some or all conferenceships
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [ConferenceshipCollection]
    def get_conferenceships(opts = {})
      data, _status_code, _headers = get_conferenceships_with_http_info(opts)
      data
    end

    # Retrieve some or all conferenceships
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [Array<(ConferenceshipCollection, Integer, Hash)>] ConferenceshipCollection data, response status code and response headers
    def get_conferenceships_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_conferenceships ...'
      end
      # resource path
      local_var_path = '/api/v1/conferenceships'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConferenceshipCollection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_conferenceships",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_conferenceships\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a single contact
    # @param contact_id [Integer] ID of contact to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Contact]
    def get_contact(contact_id, opts = {})
      data, _status_code, _headers = get_contact_with_http_info(contact_id, opts)
      data
    end

    # Retrieve a single contact
    # @param contact_id [Integer] ID of contact to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(Contact, Integer, Hash)>] Contact data, response status code and response headers
    def get_contact_with_http_info(contact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_contact ...'
      end
      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling DefaultApi.get_contact"
      end
      # resource path
      local_var_path = '/api/v1/contacts/{contactId}'.sub('{' + 'contactId' + '}', CGI.escape(contact_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Contact'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_contact",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve some or all contacts
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [ContactCollection]
    def get_contacts(opts = {})
      data, _status_code, _headers = get_contacts_with_http_info(opts)
      data
    end

    # Retrieve some or all contacts
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [Array<(ContactCollection, Integer, Hash)>] ContactCollection data, response status code and response headers
    def get_contacts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_contacts ...'
      end
      # resource path
      local_var_path = '/api/v1/contacts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ContactCollection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_contacts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a single contract
    # @param contract_id [Integer] ID of contract to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Contract]
    def get_contract(contract_id, opts = {})
      data, _status_code, _headers = get_contract_with_http_info(contract_id, opts)
      data
    end

    # Retrieve a single contract
    # @param contract_id [Integer] ID of contract to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(Contract, Integer, Hash)>] Contract data, response status code and response headers
    def get_contract_with_http_info(contract_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_contract ...'
      end
      # verify the required parameter 'contract_id' is set
      if @api_client.config.client_side_validation && contract_id.nil?
        fail ArgumentError, "Missing the required parameter 'contract_id' when calling DefaultApi.get_contract"
      end
      # resource path
      local_var_path = '/api/v1/contracts/{contractId}'.sub('{' + 'contractId' + '}', CGI.escape(contract_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Contract'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_contract",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_contract\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve some or all contracts
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [ContractCollection]
    def get_contracts(opts = {})
      data, _status_code, _headers = get_contracts_with_http_info(opts)
      data
    end

    # Retrieve some or all contracts
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [Array<(ContractCollection, Integer, Hash)>] ContractCollection data, response status code and response headers
    def get_contracts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_contracts ...'
      end
      # resource path
      local_var_path = '/api/v1/contracts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ContractCollection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_contracts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_contracts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a single deal status
    # @param deal_status_id [Integer] ID of deal status to retrieve
    # @param [Hash] opts the optional parameters
    # @return [DealStatus]
    def get_deal_status(deal_status_id, opts = {})
      data, _status_code, _headers = get_deal_status_with_http_info(deal_status_id, opts)
      data
    end

    # Retrieve a single deal status
    # @param deal_status_id [Integer] ID of deal status to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(DealStatus, Integer, Hash)>] DealStatus data, response status code and response headers
    def get_deal_status_with_http_info(deal_status_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_deal_status ...'
      end
      # verify the required parameter 'deal_status_id' is set
      if @api_client.config.client_side_validation && deal_status_id.nil?
        fail ArgumentError, "Missing the required parameter 'deal_status_id' when calling DefaultApi.get_deal_status"
      end
      # resource path
      local_var_path = '/api/v1/deal_statuses/{dealStatusId}'.sub('{' + 'dealStatusId' + '}', CGI.escape(deal_status_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DealStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_deal_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_deal_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve some or all deal statuses
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [DealStatusCollection]
    def get_deal_statuses(opts = {})
      data, _status_code, _headers = get_deal_statuses_with_http_info(opts)
      data
    end

    # Retrieve some or all deal statuses
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [Array<(DealStatusCollection, Integer, Hash)>] DealStatusCollection data, response status code and response headers
    def get_deal_statuses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_deal_statuses ...'
      end
      # resource path
      local_var_path = '/api/v1/deal_statuses'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DealStatusCollection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_deal_statuses",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_deal_statuses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a single Division
    # @param division_id [Integer] ID of the Division
    # @param [Hash] opts the optional parameters
    # @return [Division]
    def get_division(division_id, opts = {})
      data, _status_code, _headers = get_division_with_http_info(division_id, opts)
      data
    end

    # Retrieve a single Division
    # @param division_id [Integer] ID of the Division
    # @param [Hash] opts the optional parameters
    # @return [Array<(Division, Integer, Hash)>] Division data, response status code and response headers
    def get_division_with_http_info(division_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_division ...'
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling DefaultApi.get_division"
      end
      # resource path
      local_var_path = '/api/v1/divisions/{divisionId}'.sub('{' + 'divisionId' + '}', CGI.escape(division_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Division'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_division",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_division\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve some or all divisions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [DivisionCollection]
    def get_divisions(opts = {})
      data, _status_code, _headers = get_divisions_with_http_info(opts)
      data
    end

    # Retrieve some or all divisions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [Array<(DivisionCollection, Integer, Hash)>] DivisionCollection data, response status code and response headers
    def get_divisions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_divisions ...'
      end
      # resource path
      local_var_path = '/api/v1/divisions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DivisionCollection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_divisions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_divisions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a single foia label
    # @param foia_label_id [Integer] ID of foia label to retrieve
    # @param [Hash] opts the optional parameters
    # @return [FoiaLabel]
    def get_foia_label(foia_label_id, opts = {})
      data, _status_code, _headers = get_foia_label_with_http_info(foia_label_id, opts)
      data
    end

    # Retrieve a single foia label
    # @param foia_label_id [Integer] ID of foia label to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(FoiaLabel, Integer, Hash)>] FoiaLabel data, response status code and response headers
    def get_foia_label_with_http_info(foia_label_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_foia_label ...'
      end
      # verify the required parameter 'foia_label_id' is set
      if @api_client.config.client_side_validation && foia_label_id.nil?
        fail ArgumentError, "Missing the required parameter 'foia_label_id' when calling DefaultApi.get_foia_label"
      end
      # resource path
      local_var_path = '/api/v1/foia_labels/{foiaLabelId}'.sub('{' + 'foiaLabelId' + '}', CGI.escape(foia_label_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FoiaLabel'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_foia_label",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_foia_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve some or all foia labels
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [FoiaLabelCollection]
    def get_foia_labels(opts = {})
      data, _status_code, _headers = get_foia_labels_with_http_info(opts)
      data
    end

    # Retrieve some or all foia labels
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [Array<(FoiaLabelCollection, Integer, Hash)>] FoiaLabelCollection data, response status code and response headers
    def get_foia_labels_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_foia_labels ...'
      end
      # resource path
      local_var_path = '/api/v1/foia_labels'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FoiaLabelCollection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_foia_labels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_foia_labels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a single foia request
    # @param foia_request_id [Integer] ID of foia request to retrieve
    # @param [Hash] opts the optional parameters
    # @return [FoiaRequest]
    def get_foia_request(foia_request_id, opts = {})
      data, _status_code, _headers = get_foia_request_with_http_info(foia_request_id, opts)
      data
    end

    # Retrieve a single foia request
    # @param foia_request_id [Integer] ID of foia request to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(FoiaRequest, Integer, Hash)>] FoiaRequest data, response status code and response headers
    def get_foia_request_with_http_info(foia_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_foia_request ...'
      end
      # verify the required parameter 'foia_request_id' is set
      if @api_client.config.client_side_validation && foia_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'foia_request_id' when calling DefaultApi.get_foia_request"
      end
      # resource path
      local_var_path = '/api/v1/foia_requests/{foiaRequestId}'.sub('{' + 'foiaRequestId' + '}', CGI.escape(foia_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FoiaRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_foia_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_foia_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve some or all foia requests
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [FoiaRequestCollection]
    def get_foia_requests(opts = {})
      data, _status_code, _headers = get_foia_requests_with_http_info(opts)
      data
    end

    # Retrieve some or all foia requests
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [Array<(FoiaRequestCollection, Integer, Hash)>] FoiaRequestCollection data, response status code and response headers
    def get_foia_requests_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_foia_requests ...'
      end
      # resource path
      local_var_path = '/api/v1/foia_requests'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FoiaRequestCollection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_foia_requests",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_foia_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a single game
    # @param game_id [Integer] ID of game to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Game]
    def get_game(game_id, opts = {})
      data, _status_code, _headers = get_game_with_http_info(game_id, opts)
      data
    end

    # Retrieve a single game
    # @param game_id [Integer] ID of game to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(Game, Integer, Hash)>] Game data, response status code and response headers
    def get_game_with_http_info(game_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_game ...'
      end
      # verify the required parameter 'game_id' is set
      if @api_client.config.client_side_validation && game_id.nil?
        fail ArgumentError, "Missing the required parameter 'game_id' when calling DefaultApi.get_game"
      end
      # resource path
      local_var_path = '/api/v1/games/{gameId}'.sub('{' + 'gameId' + '}', CGI.escape(game_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Game'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_game",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_game\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve some or all games
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [GameCollection]
    def get_games(opts = {})
      data, _status_code, _headers = get_games_with_http_info(opts)
      data
    end

    # Retrieve some or all games
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [Array<(GameCollection, Integer, Hash)>] GameCollection data, response status code and response headers
    def get_games_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_games ...'
      end
      # resource path
      local_var_path = '/api/v1/games'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GameCollection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_games",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_games\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a single income report
    # @param income_report_id [Integer] ID of income report to retrieve
    # @param [Hash] opts the optional parameters
    # @return [IncomeReport]
    def get_income_report(income_report_id, opts = {})
      data, _status_code, _headers = get_income_report_with_http_info(income_report_id, opts)
      data
    end

    # Retrieve a single income report
    # @param income_report_id [Integer] ID of income report to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(IncomeReport, Integer, Hash)>] IncomeReport data, response status code and response headers
    def get_income_report_with_http_info(income_report_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_income_report ...'
      end
      # verify the required parameter 'income_report_id' is set
      if @api_client.config.client_side_validation && income_report_id.nil?
        fail ArgumentError, "Missing the required parameter 'income_report_id' when calling DefaultApi.get_income_report"
      end
      # resource path
      local_var_path = '/api/v1/income_reports/{incomeReportId}'.sub('{' + 'incomeReportId' + '}', CGI.escape(income_report_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IncomeReport'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_income_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_income_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve some or all income reports
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [IncomeReportCollection]
    def get_income_reports(opts = {})
      data, _status_code, _headers = get_income_reports_with_http_info(opts)
      data
    end

    # Retrieve some or all income reports
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [Array<(IncomeReportCollection, Integer, Hash)>] IncomeReportCollection data, response status code and response headers
    def get_income_reports_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_income_reports ...'
      end
      # resource path
      local_var_path = '/api/v1/income_reports'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IncomeReportCollection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_income_reports",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_income_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a job post
    # Get a job post
    # @param job_post_id [Integer] ID of job post to return
    # @param [Hash] opts the optional parameters
    # @return [JobPost]
    def get_job_post(job_post_id, opts = {})
      data, _status_code, _headers = get_job_post_with_http_info(job_post_id, opts)
      data
    end

    # Get a job post
    # Get a job post
    # @param job_post_id [Integer] ID of job post to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(JobPost, Integer, Hash)>] JobPost data, response status code and response headers
    def get_job_post_with_http_info(job_post_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_job_post ...'
      end
      # verify the required parameter 'job_post_id' is set
      if @api_client.config.client_side_validation && job_post_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_post_id' when calling DefaultApi.get_job_post"
      end
      # resource path
      local_var_path = '/central_jobs/job_posts/{jobPostId}'.sub('{' + 'jobPostId' + '}', CGI.escape(job_post_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JobPost'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_job_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_job_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all job posts
    # List all job posts
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [JobPostCollection]
    def get_job_posts(opts = {})
      data, _status_code, _headers = get_job_posts_with_http_info(opts)
      data
    end

    # List all job posts
    # List all job posts
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [Array<(JobPostCollection, Integer, Hash)>] JobPostCollection data, response status code and response headers
    def get_job_posts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_job_posts ...'
      end
      # resource path
      local_var_path = '/central_jobs/job_posts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JobPostCollection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_job_posts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_job_posts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a single ncaa financial report status
    # @param ncaa_financial_report_status_id [Integer] ID of ncaa financial report status to retrieve
    # @param [Hash] opts the optional parameters
    # @return [NcaaFinancialReportStatus]
    def get_ncaa_financial_report_status(ncaa_financial_report_status_id, opts = {})
      data, _status_code, _headers = get_ncaa_financial_report_status_with_http_info(ncaa_financial_report_status_id, opts)
      data
    end

    # Retrieve a single ncaa financial report status
    # @param ncaa_financial_report_status_id [Integer] ID of ncaa financial report status to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(NcaaFinancialReportStatus, Integer, Hash)>] NcaaFinancialReportStatus data, response status code and response headers
    def get_ncaa_financial_report_status_with_http_info(ncaa_financial_report_status_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_ncaa_financial_report_status ...'
      end
      # verify the required parameter 'ncaa_financial_report_status_id' is set
      if @api_client.config.client_side_validation && ncaa_financial_report_status_id.nil?
        fail ArgumentError, "Missing the required parameter 'ncaa_financial_report_status_id' when calling DefaultApi.get_ncaa_financial_report_status"
      end
      # resource path
      local_var_path = '/api/v1/ncaa_financial_report_statuses/{ncaaFinancialReportStatusId}'.sub('{' + 'ncaaFinancialReportStatusId' + '}', CGI.escape(ncaa_financial_report_status_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NcaaFinancialReportStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_ncaa_financial_report_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_ncaa_financial_report_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve some or all ncaa financial report statuses
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [NcaaFinancialReportStatusCollection]
    def get_ncaa_financial_report_statuses(opts = {})
      data, _status_code, _headers = get_ncaa_financial_report_statuses_with_http_info(opts)
      data
    end

    # Retrieve some or all ncaa financial report statuses
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [Array<(NcaaFinancialReportStatusCollection, Integer, Hash)>] NcaaFinancialReportStatusCollection data, response status code and response headers
    def get_ncaa_financial_report_statuses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_ncaa_financial_report_statuses ...'
      end
      # resource path
      local_var_path = '/api/v1/ncaa_financial_report_statuses'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NcaaFinancialReportStatusCollection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_ncaa_financial_report_statuses",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_ncaa_financial_report_statuses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a single position
    # @param position_id [Integer] ID of position to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Position]
    def get_position(position_id, opts = {})
      data, _status_code, _headers = get_position_with_http_info(position_id, opts)
      data
    end

    # Retrieve a single position
    # @param position_id [Integer] ID of position to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(Position, Integer, Hash)>] Position data, response status code and response headers
    def get_position_with_http_info(position_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_position ...'
      end
      # verify the required parameter 'position_id' is set
      if @api_client.config.client_side_validation && position_id.nil?
        fail ArgumentError, "Missing the required parameter 'position_id' when calling DefaultApi.get_position"
      end
      # resource path
      local_var_path = '/api/v1/positions/{positionId}'.sub('{' + 'positionId' + '}', CGI.escape(position_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Position'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_position",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_position\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve some or all positions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [PositionCollection]
    def get_positions(opts = {})
      data, _status_code, _headers = get_positions_with_http_info(opts)
      data
    end

    # Retrieve some or all positions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [Array<(PositionCollection, Integer, Hash)>] PositionCollection data, response status code and response headers
    def get_positions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_positions ...'
      end
      # resource path
      local_var_path = '/api/v1/positions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PositionCollection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_positions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_positions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a single requested item
    # @param requested_item_id [Integer] ID of requested item to retrieve
    # @param [Hash] opts the optional parameters
    # @return [RequestedItem]
    def get_requested_item(requested_item_id, opts = {})
      data, _status_code, _headers = get_requested_item_with_http_info(requested_item_id, opts)
      data
    end

    # Retrieve a single requested item
    # @param requested_item_id [Integer] ID of requested item to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(RequestedItem, Integer, Hash)>] RequestedItem data, response status code and response headers
    def get_requested_item_with_http_info(requested_item_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_requested_item ...'
      end
      # verify the required parameter 'requested_item_id' is set
      if @api_client.config.client_side_validation && requested_item_id.nil?
        fail ArgumentError, "Missing the required parameter 'requested_item_id' when calling DefaultApi.get_requested_item"
      end
      # resource path
      local_var_path = '/api/v1/requested_items/{requestedItemId}'.sub('{' + 'requestedItemId' + '}', CGI.escape(requested_item_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RequestedItem'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_requested_item",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_requested_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve some or all requested items
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [RequestedItemCollection]
    def get_requested_items(opts = {})
      data, _status_code, _headers = get_requested_items_with_http_info(opts)
      data
    end

    # Retrieve some or all requested items
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [Array<(RequestedItemCollection, Integer, Hash)>] RequestedItemCollection data, response status code and response headers
    def get_requested_items_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_requested_items ...'
      end
      # resource path
      local_var_path = '/api/v1/requested_items'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RequestedItemCollection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_requested_items",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_requested_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a single school
    # @param school_id [Integer] ID of school to retrieve
    # @param [Hash] opts the optional parameters
    # @return [School]
    def get_school(school_id, opts = {})
      data, _status_code, _headers = get_school_with_http_info(school_id, opts)
      data
    end

    # Retrieve a single school
    # @param school_id [Integer] ID of school to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(School, Integer, Hash)>] School data, response status code and response headers
    def get_school_with_http_info(school_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_school ...'
      end
      # verify the required parameter 'school_id' is set
      if @api_client.config.client_side_validation && school_id.nil?
        fail ArgumentError, "Missing the required parameter 'school_id' when calling DefaultApi.get_school"
      end
      # resource path
      local_var_path = '/api/v1/schools/{schoolId}'.sub('{' + 'schoolId' + '}', CGI.escape(school_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'School'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_school",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_school\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve some or all schools
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [SchoolCollection]
    def get_schools(opts = {})
      data, _status_code, _headers = get_schools_with_http_info(opts)
      data
    end

    # Retrieve some or all schools
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [Array<(SchoolCollection, Integer, Hash)>] SchoolCollection data, response status code and response headers
    def get_schools_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_schools ...'
      end
      # resource path
      local_var_path = '/api/v1/schools'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SchoolCollection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_schools",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_schools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a single season
    # @param season_id [Integer] ID of season to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Season]
    def get_season(season_id, opts = {})
      data, _status_code, _headers = get_season_with_http_info(season_id, opts)
      data
    end

    # Retrieve a single season
    # @param season_id [Integer] ID of season to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(Season, Integer, Hash)>] Season data, response status code and response headers
    def get_season_with_http_info(season_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_season ...'
      end
      # verify the required parameter 'season_id' is set
      if @api_client.config.client_side_validation && season_id.nil?
        fail ArgumentError, "Missing the required parameter 'season_id' when calling DefaultApi.get_season"
      end
      # resource path
      local_var_path = '/api/v1/seasons/{seasonId}'.sub('{' + 'seasonId' + '}', CGI.escape(season_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Season'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_season",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_season\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve some or all seasons
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [SeasonCollection]
    def get_seasons(opts = {})
      data, _status_code, _headers = get_seasons_with_http_info(opts)
      data
    end

    # Retrieve some or all seasons
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [Array<(SeasonCollection, Integer, Hash)>] SeasonCollection data, response status code and response headers
    def get_seasons_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_seasons ...'
      end
      # resource path
      local_var_path = '/api/v1/seasons'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SeasonCollection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_seasons",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_seasons\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a single sport
    # @param sport_id [Integer] ID of sport to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Sport]
    def get_sport(sport_id, opts = {})
      data, _status_code, _headers = get_sport_with_http_info(sport_id, opts)
      data
    end

    # Retrieve a single sport
    # @param sport_id [Integer] ID of sport to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(Sport, Integer, Hash)>] Sport data, response status code and response headers
    def get_sport_with_http_info(sport_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_sport ...'
      end
      # verify the required parameter 'sport_id' is set
      if @api_client.config.client_side_validation && sport_id.nil?
        fail ArgumentError, "Missing the required parameter 'sport_id' when calling DefaultApi.get_sport"
      end
      # resource path
      local_var_path = '/api/v1/sports/{sportId}'.sub('{' + 'sportId' + '}', CGI.escape(sport_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Sport'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_sport",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_sport\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve some or all sports
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [SportCollection]
    def get_sports(opts = {})
      data, _status_code, _headers = get_sports_with_http_info(opts)
      data
    end

    # Retrieve some or all sports
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [Array<(SportCollection, Integer, Hash)>] SportCollection data, response status code and response headers
    def get_sports_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_sports ...'
      end
      # resource path
      local_var_path = '/api/v1/sports'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SportCollection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_sports",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_sports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a single Subdivision
    # @param subdivision_id [Integer] ID of the Subdivision
    # @param [Hash] opts the optional parameters
    # @return [Subdivision]
    def get_subdivision(subdivision_id, opts = {})
      data, _status_code, _headers = get_subdivision_with_http_info(subdivision_id, opts)
      data
    end

    # Retrieve a single Subdivision
    # @param subdivision_id [Integer] ID of the Subdivision
    # @param [Hash] opts the optional parameters
    # @return [Array<(Subdivision, Integer, Hash)>] Subdivision data, response status code and response headers
    def get_subdivision_with_http_info(subdivision_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_subdivision ...'
      end
      # verify the required parameter 'subdivision_id' is set
      if @api_client.config.client_side_validation && subdivision_id.nil?
        fail ArgumentError, "Missing the required parameter 'subdivision_id' when calling DefaultApi.get_subdivision"
      end
      # resource path
      local_var_path = '/api/v1/subdivisions/{subdivisionId}'.sub('{' + 'subdivisionId' + '}', CGI.escape(subdivision_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Subdivision'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_subdivision",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_subdivision\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve some or all subdivisions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [SubdivisionCollection]
    def get_subdivisions(opts = {})
      data, _status_code, _headers = get_subdivisions_with_http_info(opts)
      data
    end

    # Retrieve some or all subdivisions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [Array<(SubdivisionCollection, Integer, Hash)>] SubdivisionCollection data, response status code and response headers
    def get_subdivisions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_subdivisions ...'
      end
      # resource path
      local_var_path = '/api/v1/subdivisions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SubdivisionCollection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_subdivisions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_subdivisions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a single Subscription
    # @param subscription_id [Integer] ID of the Subscription
    # @param [Hash] opts the optional parameters
    # @return [Subscription]
    def get_subscription(subscription_id, opts = {})
      data, _status_code, _headers = get_subscription_with_http_info(subscription_id, opts)
      data
    end

    # Retrieve a single Subscription
    # @param subscription_id [Integer] ID of the Subscription
    # @param [Hash] opts the optional parameters
    # @return [Array<(Subscription, Integer, Hash)>] Subscription data, response status code and response headers
    def get_subscription_with_http_info(subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_subscription ...'
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling DefaultApi.get_subscription"
      end
      # resource path
      local_var_path = '/api/v1/subscriptions/{subscriptionId}'.sub('{' + 'subscriptionId' + '}', CGI.escape(subscription_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Subscription'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_subscription",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the all subscriptions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [SubscriptionCollection]
    def get_subscriptions(opts = {})
      data, _status_code, _headers = get_subscriptions_with_http_info(opts)
      data
    end

    # Retrieve the all subscriptions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [Array<(SubscriptionCollection, Integer, Hash)>] SubscriptionCollection data, response status code and response headers
    def get_subscriptions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_subscriptions ...'
      end
      # resource path
      local_var_path = '/api/v1/subscriptions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SubscriptionCollection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_subscriptions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the current system settings
    # @param [Hash] opts the optional parameters
    # @return [SystemSetting]
    def get_system_settings(opts = {})
      data, _status_code, _headers = get_system_settings_with_http_info(opts)
      data
    end

    # Retrieve the current system settings
    # @param [Hash] opts the optional parameters
    # @return [Array<(SystemSetting, Integer, Hash)>] SystemSetting data, response status code and response headers
    def get_system_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_system_settings ...'
      end
      # resource path
      local_var_path = '/api/v1/system_setting'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SystemSetting'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_system_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_system_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a single user
    # @param user_id [Integer] ID of user to retrieve
    # @param [Hash] opts the optional parameters
    # @return [User]
    def get_user(user_id, opts = {})
      data, _status_code, _headers = get_user_with_http_info(user_id, opts)
      data
    end

    # Retrieve a single user
    # @param user_id [Integer] ID of user to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def get_user_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.get_user"
      end
      # resource path
      local_var_path = '/api/v1/users/{userId}'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'User'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve some or all users
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [UserCollection]
    def get_users(opts = {})
      data, _status_code, _headers = get_users_with_http_info(opts)
      data
    end

    # Retrieve some or all users
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page results page to retrieve. (default to 1)
    # @option opts [Integer] :per_page number of results per page. (default to 100)
    # @option opts [Object] :q Ransack query
    # @return [Array<(UserCollection, Integer, Hash)>] UserCollection data, response status code and response headers
    def get_users_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_users ...'
      end
      # resource path
      local_var_path = '/api/v1/users'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserCollection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a coach
    # @param coach_id [Integer] ID of coach to update
    # @param coach [Coach] Attributes to update. Currently only supports email, phone, bio, bio_text. Others will be ignored.
    # @param [Hash] opts the optional parameters
    # @return [Coach]
    def update_coach(coach_id, coach, opts = {})
      data, _status_code, _headers = update_coach_with_http_info(coach_id, coach, opts)
      data
    end

    # Update a coach
    # @param coach_id [Integer] ID of coach to update
    # @param coach [Coach] Attributes to update. Currently only supports email, phone, bio, bio_text. Others will be ignored.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Coach, Integer, Hash)>] Coach data, response status code and response headers
    def update_coach_with_http_info(coach_id, coach, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_coach ...'
      end
      # verify the required parameter 'coach_id' is set
      if @api_client.config.client_side_validation && coach_id.nil?
        fail ArgumentError, "Missing the required parameter 'coach_id' when calling DefaultApi.update_coach"
      end
      # verify the required parameter 'coach' is set
      if @api_client.config.client_side_validation && coach.nil?
        fail ArgumentError, "Missing the required parameter 'coach' when calling DefaultApi.update_coach"
      end
      # resource path
      local_var_path = '/api/v1/coaches/{coachId}'.sub('{' + 'coachId' + '}', CGI.escape(coach_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(coach)

      # return_type
      return_type = opts[:debug_return_type] || 'Coach'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_coach",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_coach\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a compensation
    # @param compensation_id [Integer] ID of compensation to update
    # @param compensation [Compensation] Compensation to update
    # @param [Hash] opts the optional parameters
    # @return [Compensation]
    def update_compensation(compensation_id, compensation, opts = {})
      data, _status_code, _headers = update_compensation_with_http_info(compensation_id, compensation, opts)
      data
    end

    # Update a compensation
    # @param compensation_id [Integer] ID of compensation to update
    # @param compensation [Compensation] Compensation to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Compensation, Integer, Hash)>] Compensation data, response status code and response headers
    def update_compensation_with_http_info(compensation_id, compensation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_compensation ...'
      end
      # verify the required parameter 'compensation_id' is set
      if @api_client.config.client_side_validation && compensation_id.nil?
        fail ArgumentError, "Missing the required parameter 'compensation_id' when calling DefaultApi.update_compensation"
      end
      # verify the required parameter 'compensation' is set
      if @api_client.config.client_side_validation && compensation.nil?
        fail ArgumentError, "Missing the required parameter 'compensation' when calling DefaultApi.update_compensation"
      end
      # resource path
      local_var_path = '/api/v1/compensations/{compensationId}'.sub('{' + 'compensationId' + '}', CGI.escape(compensation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(compensation)

      # return_type
      return_type = opts[:debug_return_type] || 'Compensation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_compensation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_compensation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a single Conference
    # @param conference_id [Integer] ID of the Conference
    # @param conference [Conference] Conference attributes to update
    # @param [Hash] opts the optional parameters
    # @return [Conference]
    def update_conference(conference_id, conference, opts = {})
      data, _status_code, _headers = update_conference_with_http_info(conference_id, conference, opts)
      data
    end

    # Update a single Conference
    # @param conference_id [Integer] ID of the Conference
    # @param conference [Conference] Conference attributes to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Conference, Integer, Hash)>] Conference data, response status code and response headers
    def update_conference_with_http_info(conference_id, conference, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_conference ...'
      end
      # verify the required parameter 'conference_id' is set
      if @api_client.config.client_side_validation && conference_id.nil?
        fail ArgumentError, "Missing the required parameter 'conference_id' when calling DefaultApi.update_conference"
      end
      # verify the required parameter 'conference' is set
      if @api_client.config.client_side_validation && conference.nil?
        fail ArgumentError, "Missing the required parameter 'conference' when calling DefaultApi.update_conference"
      end
      # resource path
      local_var_path = '/api/v1/conferences/{conferenceId}'.sub('{' + 'conferenceId' + '}', CGI.escape(conference_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(conference)

      # return_type
      return_type = opts[:debug_return_type] || 'Conference'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_conference",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_conference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a single Conferenceship
    # @param conferenceship_id [Integer] ID of the Conferenceship
    # @param conferenceship [Conferenceship] Conferenceship attributes to update
    # @param [Hash] opts the optional parameters
    # @return [Conferenceship]
    def update_conferenceship(conferenceship_id, conferenceship, opts = {})
      data, _status_code, _headers = update_conferenceship_with_http_info(conferenceship_id, conferenceship, opts)
      data
    end

    # Update a single Conferenceship
    # @param conferenceship_id [Integer] ID of the Conferenceship
    # @param conferenceship [Conferenceship] Conferenceship attributes to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Conferenceship, Integer, Hash)>] Conferenceship data, response status code and response headers
    def update_conferenceship_with_http_info(conferenceship_id, conferenceship, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_conferenceship ...'
      end
      # verify the required parameter 'conferenceship_id' is set
      if @api_client.config.client_side_validation && conferenceship_id.nil?
        fail ArgumentError, "Missing the required parameter 'conferenceship_id' when calling DefaultApi.update_conferenceship"
      end
      # verify the required parameter 'conferenceship' is set
      if @api_client.config.client_side_validation && conferenceship.nil?
        fail ArgumentError, "Missing the required parameter 'conferenceship' when calling DefaultApi.update_conferenceship"
      end
      # resource path
      local_var_path = '/api/v1/conferenceships/{conferenceshipId}'.sub('{' + 'conferenceshipId' + '}', CGI.escape(conferenceship_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(conferenceship)

      # return_type
      return_type = opts[:debug_return_type] || 'Conferenceship'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_conferenceship",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_conferenceship\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a single foia label
    # @param foia_label_id [Integer] ID of foia label to update
    # @param foia_label [FoiaLabel] Foia label to update
    # @param [Hash] opts the optional parameters
    # @return [FoiaLabel]
    def update_foia_label(foia_label_id, foia_label, opts = {})
      data, _status_code, _headers = update_foia_label_with_http_info(foia_label_id, foia_label, opts)
      data
    end

    # Update a single foia label
    # @param foia_label_id [Integer] ID of foia label to update
    # @param foia_label [FoiaLabel] Foia label to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(FoiaLabel, Integer, Hash)>] FoiaLabel data, response status code and response headers
    def update_foia_label_with_http_info(foia_label_id, foia_label, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_foia_label ...'
      end
      # verify the required parameter 'foia_label_id' is set
      if @api_client.config.client_side_validation && foia_label_id.nil?
        fail ArgumentError, "Missing the required parameter 'foia_label_id' when calling DefaultApi.update_foia_label"
      end
      # verify the required parameter 'foia_label' is set
      if @api_client.config.client_side_validation && foia_label.nil?
        fail ArgumentError, "Missing the required parameter 'foia_label' when calling DefaultApi.update_foia_label"
      end
      # resource path
      local_var_path = '/api/v1/foia_labels/{foiaLabelId}'.sub('{' + 'foiaLabelId' + '}', CGI.escape(foia_label_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(foia_label)

      # return_type
      return_type = opts[:debug_return_type] || 'FoiaLabel'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_foia_label",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_foia_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a single foia request
    # @param foia_request_id [Integer] ID of foia request to update
    # @param foia_request [FoiaRequest] Foia request to update
    # @param [Hash] opts the optional parameters
    # @return [FoiaRequest]
    def update_foia_request(foia_request_id, foia_request, opts = {})
      data, _status_code, _headers = update_foia_request_with_http_info(foia_request_id, foia_request, opts)
      data
    end

    # Update a single foia request
    # @param foia_request_id [Integer] ID of foia request to update
    # @param foia_request [FoiaRequest] Foia request to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(FoiaRequest, Integer, Hash)>] FoiaRequest data, response status code and response headers
    def update_foia_request_with_http_info(foia_request_id, foia_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_foia_request ...'
      end
      # verify the required parameter 'foia_request_id' is set
      if @api_client.config.client_side_validation && foia_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'foia_request_id' when calling DefaultApi.update_foia_request"
      end
      # verify the required parameter 'foia_request' is set
      if @api_client.config.client_side_validation && foia_request.nil?
        fail ArgumentError, "Missing the required parameter 'foia_request' when calling DefaultApi.update_foia_request"
      end
      # resource path
      local_var_path = '/api/v1/foia_requests/{foiaRequestId}'.sub('{' + 'foiaRequestId' + '}', CGI.escape(foia_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(foia_request)

      # return_type
      return_type = opts[:debug_return_type] || 'FoiaRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_foia_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_foia_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a job post
    # Update a job post
    # @param job_post_id [Integer] ID of job post to update
    # @param [Hash] opts the optional parameters
    # @option opts [JobPost] :job_post 
    # @return [JobPost]
    def update_job_post(job_post_id, opts = {})
      data, _status_code, _headers = update_job_post_with_http_info(job_post_id, opts)
      data
    end

    # Update a job post
    # Update a job post
    # @param job_post_id [Integer] ID of job post to update
    # @param [Hash] opts the optional parameters
    # @option opts [JobPost] :job_post 
    # @return [Array<(JobPost, Integer, Hash)>] JobPost data, response status code and response headers
    def update_job_post_with_http_info(job_post_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_job_post ...'
      end
      # verify the required parameter 'job_post_id' is set
      if @api_client.config.client_side_validation && job_post_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_post_id' when calling DefaultApi.update_job_post"
      end
      # resource path
      local_var_path = '/central_jobs/job_posts/{jobPostId}'.sub('{' + 'jobPostId' + '}', CGI.escape(job_post_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'job_post'])

      # return_type
      return_type = opts[:debug_return_type] || 'JobPost'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_job_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_job_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a single requested item
    # @param requested_item_id [Integer] ID of requested item to update
    # @param requested_item [RequestedItem] Requested item to update
    # @param [Hash] opts the optional parameters
    # @return [RequestedItem]
    def update_requested_item(requested_item_id, requested_item, opts = {})
      data, _status_code, _headers = update_requested_item_with_http_info(requested_item_id, requested_item, opts)
      data
    end

    # Update a single requested item
    # @param requested_item_id [Integer] ID of requested item to update
    # @param requested_item [RequestedItem] Requested item to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(RequestedItem, Integer, Hash)>] RequestedItem data, response status code and response headers
    def update_requested_item_with_http_info(requested_item_id, requested_item, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_requested_item ...'
      end
      # verify the required parameter 'requested_item_id' is set
      if @api_client.config.client_side_validation && requested_item_id.nil?
        fail ArgumentError, "Missing the required parameter 'requested_item_id' when calling DefaultApi.update_requested_item"
      end
      # verify the required parameter 'requested_item' is set
      if @api_client.config.client_side_validation && requested_item.nil?
        fail ArgumentError, "Missing the required parameter 'requested_item' when calling DefaultApi.update_requested_item"
      end
      # resource path
      local_var_path = '/api/v1/requested_items/{requestedItemId}'.sub('{' + 'requestedItemId' + '}', CGI.escape(requested_item_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(requested_item)

      # return_type
      return_type = opts[:debug_return_type] || 'RequestedItem'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey', 'Oauth2']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_requested_item",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_requested_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
