=begin
#Winthrop Intelligence Internal API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.38.0

Generated by: https://openapi-generator.tech
Generator version: 7.4.0

=end

require 'date'
require 'time'

module WinthropClient
  class RawContract
    attr_accessor :id

    attr_accessor :asset_file_size

    attr_accessor :asset_content_type

    attr_accessor :asset_file_name

    attr_accessor :created_at

    attr_accessor :updated_at

    attr_accessor :contract_type_id

    attr_accessor :uploaded

    attr_accessor :deal_id

    attr_accessor :school_id

    attr_accessor :school_revenue_year

    attr_accessor :audited_financial_year

    attr_accessor :text

    attr_accessor :use_flexpaper

    attr_accessor :game_contracts_count

    attr_accessor :drive_id

    attr_accessor :migrated_successfully

    attr_accessor :migration_failure_reason

    attr_accessor :unstract_pdf_text

    attr_accessor :unstract_responses_details

    attr_accessor :layout_preserved_pdf_text

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'asset_file_size' => :'asset_file_size',
        :'asset_content_type' => :'asset_content_type',
        :'asset_file_name' => :'asset_file_name',
        :'created_at' => :'created_at',
        :'updated_at' => :'updated_at',
        :'contract_type_id' => :'contract_type_id',
        :'uploaded' => :'uploaded',
        :'deal_id' => :'deal_id',
        :'school_id' => :'school_id',
        :'school_revenue_year' => :'school_revenue_year',
        :'audited_financial_year' => :'audited_financial_year',
        :'text' => :'text',
        :'use_flexpaper' => :'use_flexpaper',
        :'game_contracts_count' => :'game_contracts_count',
        :'drive_id' => :'drive_id',
        :'migrated_successfully' => :'migrated_successfully',
        :'migration_failure_reason' => :'migration_failure_reason',
        :'unstract_pdf_text' => :'unstract_pdf_text',
        :'unstract_responses_details' => :'unstract_responses_details',
        :'layout_preserved_pdf_text' => :'layout_preserved_pdf_text'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'asset_file_size' => :'Integer',
        :'asset_content_type' => :'String',
        :'asset_file_name' => :'String',
        :'created_at' => :'Time',
        :'updated_at' => :'Time',
        :'contract_type_id' => :'Integer',
        :'uploaded' => :'Integer',
        :'deal_id' => :'Integer',
        :'school_id' => :'Integer',
        :'school_revenue_year' => :'Integer',
        :'audited_financial_year' => :'Integer',
        :'text' => :'String',
        :'use_flexpaper' => :'Boolean',
        :'game_contracts_count' => :'Integer',
        :'drive_id' => :'String',
        :'migrated_successfully' => :'Boolean',
        :'migration_failure_reason' => :'String',
        :'unstract_pdf_text' => :'String',
        :'unstract_responses_details' => :'Object',
        :'layout_preserved_pdf_text' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'unstract_responses_details',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `WinthropClient::RawContract` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `WinthropClient::RawContract`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'asset_file_size')
        self.asset_file_size = attributes[:'asset_file_size']
      end

      if attributes.key?(:'asset_content_type')
        self.asset_content_type = attributes[:'asset_content_type']
      end

      if attributes.key?(:'asset_file_name')
        self.asset_file_name = attributes[:'asset_file_name']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'contract_type_id')
        self.contract_type_id = attributes[:'contract_type_id']
      end

      if attributes.key?(:'uploaded')
        self.uploaded = attributes[:'uploaded']
      end

      if attributes.key?(:'deal_id')
        self.deal_id = attributes[:'deal_id']
      end

      if attributes.key?(:'school_id')
        self.school_id = attributes[:'school_id']
      end

      if attributes.key?(:'school_revenue_year')
        self.school_revenue_year = attributes[:'school_revenue_year']
      end

      if attributes.key?(:'audited_financial_year')
        self.audited_financial_year = attributes[:'audited_financial_year']
      end

      if attributes.key?(:'text')
        self.text = attributes[:'text']
      end

      if attributes.key?(:'use_flexpaper')
        self.use_flexpaper = attributes[:'use_flexpaper']
      end

      if attributes.key?(:'game_contracts_count')
        self.game_contracts_count = attributes[:'game_contracts_count']
      end

      if attributes.key?(:'drive_id')
        self.drive_id = attributes[:'drive_id']
      end

      if attributes.key?(:'migrated_successfully')
        self.migrated_successfully = attributes[:'migrated_successfully']
      end

      if attributes.key?(:'migration_failure_reason')
        self.migration_failure_reason = attributes[:'migration_failure_reason']
      end

      if attributes.key?(:'unstract_pdf_text')
        self.unstract_pdf_text = attributes[:'unstract_pdf_text']
      end

      if attributes.key?(:'unstract_responses_details')
        self.unstract_responses_details = attributes[:'unstract_responses_details']
      end

      if attributes.key?(:'layout_preserved_pdf_text')
        self.layout_preserved_pdf_text = attributes[:'layout_preserved_pdf_text']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          asset_file_size == o.asset_file_size &&
          asset_content_type == o.asset_content_type &&
          asset_file_name == o.asset_file_name &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          contract_type_id == o.contract_type_id &&
          uploaded == o.uploaded &&
          deal_id == o.deal_id &&
          school_id == o.school_id &&
          school_revenue_year == o.school_revenue_year &&
          audited_financial_year == o.audited_financial_year &&
          text == o.text &&
          use_flexpaper == o.use_flexpaper &&
          game_contracts_count == o.game_contracts_count &&
          drive_id == o.drive_id &&
          migrated_successfully == o.migrated_successfully &&
          migration_failure_reason == o.migration_failure_reason &&
          unstract_pdf_text == o.unstract_pdf_text &&
          unstract_responses_details == o.unstract_responses_details &&
          layout_preserved_pdf_text == o.layout_preserved_pdf_text
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, asset_file_size, asset_content_type, asset_file_name, created_at, updated_at, contract_type_id, uploaded, deal_id, school_id, school_revenue_year, audited_financial_year, text, use_flexpaper, game_contracts_count, drive_id, migrated_successfully, migration_failure_reason, unstract_pdf_text, unstract_responses_details, layout_preserved_pdf_text].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = WinthropClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
