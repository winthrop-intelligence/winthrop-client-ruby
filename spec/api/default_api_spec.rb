=begin
#Winthrop Intelligence Internal API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'spec_helper'
require 'json'

# Unit tests for WinthropClient::DefaultApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'DefaultApi' do
  before do
    # run before each test
    @api_instance = WinthropClient::DefaultApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DefaultApi' do
    it 'should create an instance of DefaultApi' do
      expect(@api_instance).to be_instance_of(WinthropClient::DefaultApi)
    end
  end

  # unit tests for create_foia_label
  # Create a new foia label
  # @param foia_label Foia label to create
  # @param [Hash] opts the optional parameters
  # @return [FoiaLabel]
  describe 'create_foia_label test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_foia_request
  # Create a new foia request
  # @param foia_request Foia request to create
  # @param [Hash] opts the optional parameters
  # @return [FoiaRequest]
  describe 'create_foia_request test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_requested_item
  # Create a new requested item
  # @param requested_item Requested item to create
  # @param [Hash] opts the optional parameters
  # @return [RequestedItem]
  describe 'create_requested_item test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_foia_label
  # Delete a single foia label
  # @param foia_label_id ID of foia label to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_foia_label test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_foia_request
  # Delete a single foia request
  # @param foia_request_id ID of foia request to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_foia_request test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_requested_item
  # Delete a single requested item
  # @param requested_item_id ID of requested item to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_requested_item test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_audited_financial_report_status
  # Retrieve a single audited financial report status
  # @param audited_financial_report_status_id ID of audited financial report status to retrieve
  # @param [Hash] opts the optional parameters
  # @return [AuditedFinancialReportStatus]
  describe 'get_audited_financial_report_status test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_audited_financial_report_statuses
  # Retrieve some or all audited financial report statuses
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page results page to retrieve.
  # @option opts [Integer] :per_page number of results per page.
  # @option opts [Object] :q Ransack query
  # @return [AuditedFinancialReportStatusCollection]
  describe 'get_audited_financial_report_statuses test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_coach
  # Retrieve a single coach
  # @param coach_id ID of coach to retrieve
  # @param [Hash] opts the optional parameters
  # @return [Coach]
  describe 'get_coach test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_coaches
  # Retrieve some or all coaches
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page results page to retrieve.
  # @option opts [Integer] :per_page number of results per page.
  # @option opts [Object] :q Ransack query
  # @return [CoachCollection]
  describe 'get_coaches test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_compensation
  # Retrieve a single compensation
  # @param compensation_id ID of compensation to retrieve
  # @param [Hash] opts the optional parameters
  # @return [Compensation]
  describe 'get_compensation test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_compensations
  # Retrieve some or all compensations
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page results page to retrieve.
  # @option opts [Integer] :per_page number of results per page.
  # @option opts [Object] :q Ransack query
  # @return [CompensationCollection]
  describe 'get_compensations test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_deal_status
  # Retrieve a single deal status
  # @param deal_status_id ID of deal status to retrieve
  # @param [Hash] opts the optional parameters
  # @return [DealStatus]
  describe 'get_deal_status test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_deal_statuses
  # Retrieve some or all deal statuses
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page results page to retrieve.
  # @option opts [Integer] :per_page number of results per page.
  # @option opts [Object] :q Ransack query
  # @return [DealStatusCollection]
  describe 'get_deal_statuses test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_foia_label
  # Retrieve a single foia label
  # @param foia_label_id ID of foia label to retrieve
  # @param [Hash] opts the optional parameters
  # @return [FoiaLabel]
  describe 'get_foia_label test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_foia_labels
  # Retrieve some or all foia labels
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page results page to retrieve.
  # @option opts [Integer] :per_page number of results per page.
  # @option opts [Object] :q Ransack query
  # @return [FoiaLabelCollection]
  describe 'get_foia_labels test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_foia_request
  # Retrieve a single foia request
  # @param foia_request_id ID of foia request to retrieve
  # @param [Hash] opts the optional parameters
  # @return [FoiaRequest]
  describe 'get_foia_request test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_foia_requests
  # Retrieve some or all foia requests
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page results page to retrieve.
  # @option opts [Integer] :per_page number of results per page.
  # @option opts [Object] :q Ransack query
  # @return [FoiaRequestCollection]
  describe 'get_foia_requests test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_game
  # Retrieve a single game
  # @param game_id ID of game to retrieve
  # @param [Hash] opts the optional parameters
  # @return [Game]
  describe 'get_game test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_games
  # Retrieve some or all games
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page results page to retrieve.
  # @option opts [Integer] :per_page number of results per page.
  # @option opts [Object] :q Ransack query
  # @return [GameCollection]
  describe 'get_games test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_income_report
  # Retrieve a single income report
  # @param income_report_id ID of income report to retrieve
  # @param [Hash] opts the optional parameters
  # @return [IncomeReport]
  describe 'get_income_report test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_income_reports
  # Retrieve some or all income reports
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page results page to retrieve.
  # @option opts [Integer] :per_page number of results per page.
  # @option opts [Object] :q Ransack query
  # @return [IncomeReportCollection]
  describe 'get_income_reports test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_ncaa_financial_report_status
  # Retrieve a single ncaa financial report status
  # @param ncaa_financial_report_status_id ID of ncaa financial report status to retrieve
  # @param [Hash] opts the optional parameters
  # @return [NcaaFinancialReportStatus]
  describe 'get_ncaa_financial_report_status test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_ncaa_financial_report_statuses
  # Retrieve some or all ncaa financial report statuses
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page results page to retrieve.
  # @option opts [Integer] :per_page number of results per page.
  # @option opts [Object] :q Ransack query
  # @return [NcaaFinancialReportStatusCollection]
  describe 'get_ncaa_financial_report_statuses test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_requested_item
  # Retrieve a single requested item
  # @param requested_item_id ID of requested item to retrieve
  # @param [Hash] opts the optional parameters
  # @return [RequestedItem]
  describe 'get_requested_item test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_requested_items
  # Retrieve some or all requested items
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page results page to retrieve.
  # @option opts [Integer] :per_page number of results per page.
  # @option opts [Object] :q Ransack query
  # @return [RequestedItemCollection]
  describe 'get_requested_items test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_school
  # Retrieve a single school
  # @param school_id ID of school to retrieve
  # @param [Hash] opts the optional parameters
  # @return [School]
  describe 'get_school test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_schools
  # Retrieve some or all schools
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page results page to retrieve.
  # @option opts [Integer] :per_page number of results per page.
  # @option opts [Object] :q Ransack query
  # @return [SchoolCollection]
  describe 'get_schools test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_user
  # Retrieve a single user
  # @param user_id ID of user to retrieve
  # @param [Hash] opts the optional parameters
  # @return [User]
  describe 'get_user test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_users
  # Retrieve some or all users
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page results page to retrieve.
  # @option opts [Integer] :per_page number of results per page.
  # @option opts [Object] :q Ransack query
  # @return [UserCollection]
  describe 'get_users test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for summarizer_post_qa_s3
  # Answer questions over a file from S3
  # Answer questions a file from S3.
  # @param [Hash] opts the optional parameters
  # @option opts [SummarizerPostQaS3Request] :summarizer_post_qa_s3_request 
  # @return [String]
  describe 'summarizer_post_qa_s3 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for summarizer_post_summarize_s3
  # Summarize a file from S3
  # Summarizes a file from S3.
  # @param [Hash] opts the optional parameters
  # @option opts [SummarizerPostSummarizeS3Request] :summarizer_post_summarize_s3_request 
  # @return [String]
  describe 'summarizer_post_summarize_s3 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_foia_label
  # Update a single foia label
  # @param foia_label_id ID of foia label to update
  # @param foia_label Foia label to update
  # @param [Hash] opts the optional parameters
  # @return [FoiaLabel]
  describe 'update_foia_label test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_foia_request
  # Update a single foia request
  # @param foia_request_id ID of foia request to update
  # @param foia_request Foia request to update
  # @param [Hash] opts the optional parameters
  # @return [FoiaRequest]
  describe 'update_foia_request test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_requested_item
  # Update a single requested item
  # @param requested_item_id ID of requested item to update
  # @param requested_item Requested item to update
  # @param [Hash] opts the optional parameters
  # @return [RequestedItem]
  describe 'update_requested_item test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
